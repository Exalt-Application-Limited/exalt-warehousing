openapi: 3.0.3
info:
  title: Facility Owner Customer Portal API
  description: |
    API specification for the Facility Owner Customer Portal frontend application.
    This documents the integration points with backend microservices in the 
    Exalt warehousing ecosystem.
  version: 1.0.0
  contact:
    name: Exalt Application Limited
    email: support@exalt-storage.com
    url: https://exalt-storage.com
  license:
    name: Proprietary
    url: https://exalt-storage.com/license

servers:
  - url: http://localhost:3202
    description: Development server
  - url: https://portal-staging.exalt-storage.com
    description: Staging server
  - url: https://portal.exalt-storage.com
    description: Production server

tags:
  - name: health
    description: Application health and status
  - name: auth
    description: Authentication and authorization
  - name: facilities
    description: Facility management operations
  - name: customers
    description: Customer management operations
  - name: units
    description: Storage unit operations
  - name: financial
    description: Financial and billing operations
  - name: analytics
    description: Performance metrics and analytics

paths:
  /health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Returns the health status of the frontend application
      operationId: getHealth
      responses:
        '200':
          description: Application is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "healthy"
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/dashboard:
    get:
      tags:
        - facilities
      summary: Get dashboard data
      description: Retrieve aggregated dashboard metrics for facility owner
      operationId: getDashboardData
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/facilities/current:
    get:
      tags:
        - facilities
      summary: Get current facility
      description: Retrieve details of the facility owned by the authenticated user
      operationId: getCurrentFacility
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Facility details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - facilities
      summary: Update current facility
      description: Update facility information
      operationId: updateCurrentFacility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityUpdate'
      responses:
        '200':
          description: Facility updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/customers:
    get:
      tags:
        - customers
      summary: Get facility customers
      description: Retrieve list of customers for the facility
      operationId: getCustomers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter by lease status
          schema:
            type: string
            enum: [active, past_due, ending_soon, terminated]
        - name: search
          in: query
          description: Search by customer name or email
          schema:
            type: string
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/customers/{customerId}:
    get:
      tags:
        - customers
      summary: Get customer details
      description: Retrieve detailed information about a specific customer
      operationId: getCustomer
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - customers
      summary: Update customer
      description: Update customer information
      operationId: updateCustomer
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/units:
    get:
      tags:
        - units
      summary: Get facility units
      description: Retrieve list of storage units for the facility
      operationId: getUnits
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by unit status
          schema:
            type: string
            enum: [available, occupied, reserved, maintenance]
        - name: type
          in: query
          description: Filter by unit type
          schema:
            type: string
        - name: floor
          in: query
          description: Filter by floor number
          schema:
            type: integer
        - name: building
          in: query
          description: Filter by building
          schema:
            type: string
      responses:
        '200':
          description: Units retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/units/{unitId}:
    get:
      tags:
        - units
      summary: Get unit details
      description: Retrieve detailed information about a specific unit
      operationId: getUnit
      security:
        - bearerAuth: []
      parameters:
        - name: unitId
          in: path
          required: true
          description: Unit ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - units
      summary: Update unit
      description: Update unit information and status
      operationId: updateUnit
      security:
        - bearerAuth: []
      parameters:
        - name: unitId
          in: path
          required: true
          description: Unit ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitUpdate'
      responses:
        '200':
          description: Unit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/financial/revenue:
    get:
      tags:
        - financial
      summary: Get revenue data
      description: Retrieve revenue metrics and trends
      operationId: getRevenueData
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for revenue data
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: monthly
        - name: startDate
          in: query
          description: Start date for revenue period
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for revenue period
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Revenue data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueData'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/analytics/occupancy:
    get:
      tags:
        - analytics
      summary: Get occupancy analytics
      description: Retrieve occupancy trends and statistics
      operationId: getOccupancyAnalytics
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for occupancy data
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: monthly
      responses:
        '200':
          description: Occupancy analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccupancyAnalytics'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    Address:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
          example: "1234 Storage Blvd"
        city:
          type: string
          example: "Los Angeles"
        state:
          type: string
          example: "CA"
        zipCode:
          type: string
          example: "90210"
        country:
          type: string
          example: "USA"

    Facility:
      type: object
      required:
        - id
        - name
        - address
        - phone
        - email
        - managerId
        - totalUnits
        - occupiedUnits
        - occupancyRate
        - monthlyRevenue
        - rating
      properties:
        id:
          type: string
          format: uuid
          description: Facility unique identifier
        name:
          type: string
          example: "SecureStore LA Downtown"
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          example: "+1-555-123-4567"
        email:
          type: string
          format: email
          example: "downtown@securestore.com"
        managerId:
          type: string
          format: uuid
          description: Facility manager user ID
        totalUnits:
          type: integer
          minimum: 0
          example: 136
        occupiedUnits:
          type: integer
          minimum: 0
          example: 115
        occupancyRate:
          type: number
          format: float
          minimum: 0
          maximum: 100
          example: 84.6
        monthlyRevenue:
          type: number
          format: float
          minimum: 0
          example: 28450.00
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.8
        amenities:
          type: array
          items:
            type: string
          example: ["climate_controlled", "24_7_access", "security_cameras"]
        operatingHours:
          type: object
          additionalProperties:
            type: object
            properties:
              open:
                type: string
                format: time
                example: "09:00"
              close:
                type: string
                format: time
                example: "18:00"
              is24Hours:
                type: boolean
                example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FacilityUpdate:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        amenities:
          type: array
          items:
            type: string
        operatingHours:
          type: object

    Customer:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - phone
        - address
        - units
        - totalMonthlyRent
        - paymentMethod
        - leaseStatus
        - joinDate
        - rating
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          example: "Sarah"
        lastName:
          type: string
          example: "Miller"
        email:
          type: string
          format: email
          example: "sarah.miller@email.com"
        phone:
          type: string
          example: "+1-555-987-6543"
        address:
          $ref: '#/components/schemas/Address'
        units:
          type: array
          items:
            type: string
            format: uuid
          description: Array of unit IDs rented by customer
        totalMonthlyRent:
          type: number
          format: float
          minimum: 0
          example: 95.00
        paymentMethod:
          type: object
          required:
            - type
            - autopay
          properties:
            type:
              type: string
              enum: [credit_card, bank_transfer, cash]
              example: "credit_card"
            lastFour:
              type: string
              example: "4532"
            autopay:
              type: boolean
              example: true
        leaseStatus:
          type: string
          enum: [active, past_due, ending_soon, terminated]
          example: "active"
        joinDate:
          type: string
          format: date
          example: "2023-06-15"
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.9
        notes:
          type: string
          description: Internal notes about the customer
        emergencyContact:
          type: object
          required:
            - name
            - phone
            - relationship
          properties:
            name:
              type: string
              example: "John Miller"
            phone:
              type: string
              example: "+1-555-555-5555"
            relationship:
              type: string
              example: "Spouse"

    CustomerUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: object
        notes:
          type: string
        emergencyContact:
          type: object

    CustomerList:
      type: object
      required:
        - customers
        - pagination
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Unit:
      type: object
      required:
        - id
        - number
        - type
        - size
        - features
        - monthlyRate
        - isOccupied
        - status
        - floor
        - building
        - zone
      properties:
        id:
          type: string
          format: uuid
        number:
          type: string
          example: "10x10-B23"
        type:
          type: string
          example: "10x10"
        size:
          type: object
          required:
            - width
            - height
            - area
          properties:
            width:
              type: number
              format: float
              example: 10.0
            height:
              type: number
              format: float
              example: 10.0
            area:
              type: number
              format: float
              example: 100.0
        features:
          type: array
          items:
            type: string
          example: ["climate_controlled", "ground_floor"]
        monthlyRate:
          type: number
          format: float
          minimum: 0
          example: 95.00
        isOccupied:
          type: boolean
          example: true
        customerId:
          type: string
          format: uuid
          nullable: true
        customer:
          $ref: '#/components/schemas/Customer'
          nullable: true
        leaseStartDate:
          type: string
          format: date
          nullable: true
          example: "2023-06-15"
        leaseEndDate:
          type: string
          format: date
          nullable: true
          example: "2024-06-15"
        accessCode:
          type: string
          nullable: true
          example: "A123-B456"
        notes:
          type: string
          nullable: true
        status:
          type: string
          enum: [available, occupied, reserved, maintenance]
          example: "occupied"
        floor:
          type: integer
          minimum: 0
          example: 2
        building:
          type: string
          example: "B"
        zone:
          type: string
          example: "B2"

    UnitUpdate:
      type: object
      properties:
        monthlyRate:
          type: number
          format: float
          minimum: 0
        status:
          type: string
          enum: [available, occupied, reserved, maintenance]
        notes:
          type: string
        accessCode:
          type: string

    UnitList:
      type: object
      required:
        - units
      properties:
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'

    DashboardData:
      type: object
      required:
        - customerCount
        - occupancyRate
        - monthlyRevenue
        - facilityRating
        - growthRate
        - unitTypes
        - recentActivity
        - alerts
      properties:
        customerCount:
          type: integer
          example: 234
        occupancyRate:
          type: number
          format: float
          example: 89.2
        monthlyRevenue:
          type: number
          format: float
          example: 28450.00
        facilityRating:
          type: number
          format: float
          example: 4.8
        growthRate:
          type: number
          format: float
          example: 15.3
        unitTypes:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "10x10 Medium"
              total:
                type: integer
                example: 52
              occupied:
                type: integer
                example: 45
              occupancyRate:
                type: number
                format: float
                example: 86.5
        recentActivity:
          type: object
          properties:
            signups:
              type: integer
              example: 5
            moveouts:
              type: integer
              example: 3
            paymentReminders:
              type: integer
              example: 8
        alerts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
                enum: [urgent, attention, info]
              title:
                type: string
              actions:
                type: array
                items:
                  type: string

    RevenueData:
      type: object
      required:
        - totalRevenue
        - previousPeriod
        - growth
        - breakdown
        - trends
      properties:
        totalRevenue:
          type: number
          format: float
          example: 28450.00
        previousPeriod:
          type: number
          format: float
          example: 26110.00
        growth:
          type: number
          format: float
          example: 8.97
        breakdown:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
                example: "Monthly rent"
              amount:
                type: number
                format: float
                example: 26890.00
        trends:
          type: array
          items:
            type: object
            properties:
              period:
                type: string
                example: "2024-11"
              revenue:
                type: number
                format: float
                example: 28450.00

    OccupancyAnalytics:
      type: object
      required:
        - currentOccupancy
        - trends
        - byType
        - byFloor
      properties:
        currentOccupancy:
          type: object
          properties:
            total:
              type: integer
              example: 136
            occupied:
              type: integer
              example: 115
            available:
              type: integer
              example: 18
            maintenance:
              type: integer
              example: 2
            reserved:
              type: integer
              example: 1
        trends:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              occupancyRate:
                type: number
                format: float
              newMoveIns:
                type: integer
              moveOuts:
                type: integer
        byType:
          type: object
          additionalProperties:
            type: object
            properties:
              total:
                type: integer
              occupied:
                type: integer
              rate:
                type: number
                format: float
        byFloor:
          type: object
          additionalProperties:
            type: object
            properties:
              total:
                type: integer
              occupied:
                type: integer
              rate:
                type: number
                format: float

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - pages
      properties:
        page:
          type: integer
          minimum: 1
          example: 1
        limit:
          type: integer
          minimum: 1
          example: 20
        total:
          type: integer
          minimum: 0
          example: 234
        pages:
          type: integer
          minimum: 0
          example: 12

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []