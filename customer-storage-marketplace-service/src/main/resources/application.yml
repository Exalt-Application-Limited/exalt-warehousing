server:
  port: 8083
  servlet:
    context-path: /customer-storage-marketplace

spring:
  application:
    name: customer-storage-marketplace-service
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:customer_storage_marketplace}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: customer-storage-marketplace-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.exalt.warehousing.marketplace.dto"

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    health-check-url-path: /customer-storage-marketplace/actuator/health

# Management and Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: true
    db:
      enabled: true

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: Customer Storage Marketplace API
    description: B2C marketplace service for customer storage solutions
    version: 1.0.0
    contact:
      name: Exalt Development Team
      email: dev@exalt.com

# Application-specific Configuration
app:
  marketplace:
    # Search Configuration
    search:
      max-radius-km: 100
      default-radius-km: 25
      max-results-per-page: 100
      default-page-size: 20
    
    # Caching Configuration
    cache:
      facility-details-ttl: 300  # 5 minutes
      search-results-ttl: 180    # 3 minutes
      popular-facilities-ttl: 600 # 10 minutes
    
    # Business Rules
    business:
      min-rating: 1
      max-rating: 5
      min-review-count-for-featured: 5
      high-occupancy-threshold: 85  # percentage
    
    # Image Configuration
    images:
      max-file-size: 10MB
      allowed-formats: jpg,jpeg,png,webp
      thumbnail-size: 300x200
      full-size: 1200x800

# Logging Configuration
logging:
  level:
    com.exalt.warehousing.marketplace: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:customer-storage-marketplace-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
  cors:
    allowed-origins: ${CORS_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true

# External Service URLs
external-services:
  payment-service: ${PAYMENT_SERVICE_URL:http://payment-processing-service}
  notification-service: ${NOTIFICATION_SERVICE_URL:http://notification-service}
  user-profile-service: ${USER_PROFILE_SERVICE_URL:http://user-profile-service}
  file-storage-service: ${FILE_STORAGE_SERVICE_URL:http://file-storage-service}
  geo-location-service: ${GEO_LOCATION_SERVICE_URL:http://geo-location-service}