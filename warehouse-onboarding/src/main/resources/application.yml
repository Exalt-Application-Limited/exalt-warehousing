server:
  port: 8085
  servlet:
    context-path: /warehouse-onboarding

spring:
  application:
    name: warehouse-onboarding-service
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:warehouse_onboarding}
    username: ${DB_USERNAME:warehouse_user}
    password: ${DB_PASSWORD:warehouse_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      maximum-pool-size: 20
      minimum-idle: 5
      pool-name: WarehouseOnboardingHikariCP
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        jdbc.time_zone: UTC
    open-in-view: false
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1.0.0
    table: schema_version_onboarding
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour
      cache-null-values: false
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
    consumer:
      group-id: warehouse-onboarding-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.ecosystem.warehousing.onboarding"
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8080/auth/realms/ecosystem}
          jwk-set-uri: ${OAUTH2_JWK_SET_URI:http://localhost:8080/auth/realms/ecosystem/protocol/openid-connect/certs}
  
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  cloud:
    openfeign:
      client:
        config:
          default:
            connect-timeout: 5000
            read-timeout: 10000

# Activiti Workflow Configuration
activiti:
  database-schema-update: true
  db-identity-used: true
  history-level: full
  deployment-name: warehouse-onboarding-workflows

# AWS Configuration
aws:
  region: ${AWS_REGION:us-east-1}
  s3:
    bucket-name: ${AWS_S3_BUCKET:warehouse-onboarding-documents}
    access-key: ${AWS_ACCESS_KEY:}
    secret-key: ${AWS_SECRET_KEY:}

# KYC Service Configuration
kyc:
  service:
    enabled: ${KYC_SERVICE_ENABLED:true}
    provider: ${KYC_PROVIDER:mock}
    api-key: ${KYC_API_KEY:}
    webhook-secret: ${KYC_WEBHOOK_SECRET:}
  
# Document Processing Configuration
document:
  processing:
    max-file-size: 10MB
    allowed-types: pdf,jpg,jpeg,png,doc,docx
    virus-scan-enabled: ${VIRUS_SCAN_ENABLED:false}
  storage:
    type: s3
    retention-days: 2555 # 7 years

# Onboarding Configuration
onboarding:
  approval:
    auto-approve-enabled: ${AUTO_APPROVE_ENABLED:false}
    auto-approve-threshold: 0.95
  expiry:
    days: 30
  notification:
    enabled: ${NOTIFICATION_ENABLED:true}
    email-templates-path: classpath:templates/email/
  reporting:
    enabled: ${REPORTING_ENABLED:true}

# External Service URLs
external:
  services:
    billing-service: ${BILLING_SERVICE_URL:http://localhost:8081}
    notification-service: ${NOTIFICATION_SERVICE_URL:http://localhost:8086}
    analytics-service: ${ANALYTICS_SERVICE_URL:http://localhost:8087}

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    config-url: /api-docs/swagger-config
    urls:
      - url: /api-docs
        name: Warehouse Onboarding API
    operations-sorter: method
    tags-sorter: alpha

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops,flyway
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      service: warehouse-onboarding
      version: @project.version@
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true

# Logging Configuration
logging:
  level:
    com.ecosystem.warehousing.onboarding: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.activiti: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/warehouse-onboarding.log
    max-size: 100MB
    max-history: 30

# Validation Configuration
validation:
  business-registration:
    min-length: 5
    max-length: 50
  tax-identification:
    min-length: 5
    max-length: 50

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:postgresql://localhost:5432/warehouse_onboarding_dev
    username: dev_user
    password: dev_password
  
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  
  mail:
    host: localhost
    port: 1025 # MailHog for development

logging:
  level:
    com.ecosystem.warehousing.onboarding: DEBUG
    org.springframework.security: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  flyway:
    enabled: false

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    show-sql: false
  
  security:
    require-ssl: true

logging:
  level:
    com.ecosystem.warehousing.onboarding: WARN